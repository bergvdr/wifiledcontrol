//Get the websocketserver to connect to
var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1)),
    sURLVariables = sPageURL.split('&'),
    sParameterName,
    i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : sParameterName[1];
        }
    }
};
ws1 = getUrlParameter('ws1');
if(ws1 == undefined || ws1 == '') {
    ws1 = location.host;
    if(ws1 == '') {
        ws1 = 'ws://127.0.0.1:81';
    } else {
        ws1 = 'ws://'+ws1.split(":")[0]+':81';
    }
}

//Set up the websocket connection
var mysocket = new WebSocket(ws1);
var heartbeat_msg = '>', heartbeat_interval = null, missed_heartbeats = 0;
var individualmode = "rainbow";
var charactercolor = '330000';

//Prepare a charset (source http://pastebin.com/wHx3ZYm9)
var charset = [
     0xFF,0xC3,0xC3,0xC3,0xC3,0xC3,0xC3,0xFF // 0. Square
    ,0xFF,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0 // 1. 
    ,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF // 2. 
    ,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0xFF // 3. 
    ,0x0C,0x18,0x30,0x7E,0x0C,0x18,0x30,0x00 // 4. 
    ,0xFF,0xC3,0xE7,0xDB,0xDB,0xE7,0xC3,0xFF // 5. 
    ,0x00,0x01,0x03,0x06,0xCC,0x78,0x30,0x00 // 6. 
    ,0x3C,0x66,0xC3,0xC3,0xFF,0x24,0xE7,0x00 // 7. 
    ,0x00,0x00,0x30,0x60,0xFF,0x60,0x30,0x00 // 8. Arrow <-
    ,0x00,0x00,0x0C,0x06,0xFF,0x06,0x0C,0x00 // 9. Arrow ->
    ,0x18,0x18,0x18,0x18,0xDB,0x7E,0x3C,0x18 // 10. Arrow down
    ,0x18,0x3C,0x7E,0xDB,0x18,0x18,0x18,0x18 // 11. Arrow up
    ,0x18,0x5A,0x3C,0x99,0xDB,0x7E,0x3C,0x18 // 12. 
    ,0x00,0x03,0x33,0x63,0xFE,0x60,0x30,0x00 // 13. 
    ,0x3C,0x66,0xFF,0xDB,0xDB,0xFF,0x66,0x3C // 14. 
    ,0x3C,0x66,0xC3,0xDB,0xDB,0xC3,0x66,0x3C // 15. 
    ,0xFF,0xC3,0xC3,0xFF,0xC3,0xC3,0xC3,0xFF // 16. 
    ,0x3C,0x7E,0xDB,0xDB,0xDF,0xC3,0x66,0x3C // 17. 
    ,0x3C,0x66,0xC3,0xDF,0xDB,0xDB,0x7E,0x3C // 18. 
    ,0x3C,0x66,0xC3,0xFB,0xDB,0xDB,0x7E,0x3C // 19. 
    ,0x3C,0x7E,0xDB,0xDB,0xFB,0xC3,0x66,0x3C // 20. 
    ,0x00,0x01,0x33,0x1E,0xCE,0x7B,0x31,0x00 // 21. 
    ,0x7E,0x66,0x66,0x66,0x66,0x66,0x66,0xE7 // 22. 
    ,0x03,0x03,0x03,0xFF,0x03,0x03,0x03,0x00 // 23. 
    ,0xFF,0x66,0x3C,0x18,0x18,0x3C,0x66,0xFF // 24. 
    ,0x18,0x18,0x3C,0x3C,0x3C,0x3C,0x18,0x18 // 25. 
    ,0x3C,0x66,0x66,0x30,0x18,0x00,0x18,0x00 // 26. 
    ,0x3C,0x66,0xC3,0xFF,0xC3,0xC3,0x66,0x3C // 27. 
    ,0xFF,0xDB,0xDB,0xDB,0xFB,0xC3,0xC3,0xFF // 28. 
    ,0xFF,0xC3,0xC3,0xFB,0xDB,0xDB,0xDB,0xFF // 29. 
    ,0xFF,0xC3,0xC3,0xDF,0xDB,0xDB,0xDB,0xFF // 30. 
    ,0xFF,0xDB,0xDB,0xDB,0xDF,0xC3,0xC3,0xFF // 31. -> From here it follows the ASCII table
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // 32. All off (space)
    ,0x18,0x18,0x18,0x18,0x18,0x00,0x18,0x00 // 33. !
    ,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00 // 34. "
    ,0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00 // 35. #
    ,0x18,0x3E,0x58,0x3C,0x1A,0x7C,0x18,0x00 // 36. $
    ,0x00,0xC6,0xCC,0x18,0x30,0x66,0xC6,0x00 // 37. %
    ,0x38,0x6C,0x38,0x76,0xDC,0xCC,0x76,0x00 // 38. ^
    ,0x18,0x18,0x30,0x00,0x00,0x00,0x00,0x00 // 39. '
    ,0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00 // 40. (
    ,0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00 // 41. )
    ,0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00 // 42. *
    ,0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00 // 43. +
    ,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x30 // 44. '
    ,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00 // 45. -
    ,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00 // 46. .
    ,0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00 // 47. /
    ,0x7C,0xC6,0xCE,0xD6,0xE6,0xC6,0x7C,0x00 // 48. 0
    ,0x18,0x38,0x18,0x18,0x18,0x18,0x7E,0x00 // 49. 1
    ,0x3C,0x66,0x06,0x3C,0x60,0x66,0x7E,0x00 // 50. 2
    ,0x3C,0x66,0x06,0x1C,0x06,0x66,0x3C,0x00 // 51. 3
    ,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x1E,0x00 // 52. 4
    ,0x7E,0x62,0x60,0x7C,0x06,0x66,0x3C,0x00 // 53. 5
    ,0x3C,0x66,0x60,0x7C,0x66,0x66,0x3C,0x00 // 54. 6
    ,0x7E,0x66,0x06,0x0C,0x18,0x18,0x18,0x00 // 55. 7
    ,0x3C,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00 // 56. 8
    ,0x3C,0x66,0x66,0x3E,0x06,0x66,0x3C,0x00 // 57. 9
    ,0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x00 // 58. :
    ,0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x30 // 59. ;
    ,0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x00 // 60. <
    ,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00 // 61. =
    ,0x60,0x30,0x18,0x0C,0x18,0x30,0x60,0x00 // 62. >
    ,0x3C,0x66,0x66,0x0C,0x18,0x00,0x18,0x00 // 63. ?
    ,0x7C,0xC6,0xDE,0xDE,0xDE,0xC0,0x7C,0x00 // 64. @???
    ,0x18,0x3C,0x66,0x66,0x7E,0x66,0x66,0x00 // 65. A
    ,0xFC,0x66,0x66,0x7C,0x66,0x66,0xFC,0x00 // 66. B
    ,0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C,0x00 // 67. C
    ,0xF8,0x6C,0x66,0x66,0x66,0x6C,0xF8,0x00 // 68. D
    ,0xFE,0x62,0x68,0x78,0x68,0x62,0xFE,0x00 // 69. E
    ,0xFE,0x62,0x68,0x78,0x68,0x60,0xF0,0x00 // 70. F
    ,0x3C,0x66,0xC0,0xC0,0xCE,0x66,0x3E,0x00 // 71. G
    ,0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x00 // 72. H
    ,0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x00 // 73. I
    ,0x1E,0x0C,0x0C,0x0C,0xCC,0xCC,0x78,0x00 // 74. J
    ,0xE6,0x66,0x6C,0x78,0x6C,0x66,0xE6,0x00 // 75. K
    ,0xF0,0x60,0x60,0x60,0x62,0x66,0xFE,0x00 // 76. L
    ,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0x00 // 77. M
    ,0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x00 // 78. N
    ,0x38,0x6C,0xC6,0xC6,0xC6,0x6C,0x38,0x00 // 79. O
    ,0xFC,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00 // 80. P
    ,0x38,0x6C,0xC6,0xC6,0xDA,0xCC,0x76,0x00 // 81. Q
    ,0xFC,0x66,0x66,0x7C,0x6C,0x66,0xE6,0x00 // 82. R
    ,0x3C,0x66,0x60,0x3C,0x06,0x66,0x3C,0x00 // 83. S
    ,0x7E,0x5A,0x18,0x18,0x18,0x18,0x3C,0x00 // 84. T
    ,0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00 // 85. U
    ,0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00 // 86. V
    ,0xC6,0xC6,0xC6,0xD6,0xFE,0xEE,0xC6,0x00 // 87. W
    ,0xC6,0x6C,0x38,0x38,0x6C,0xC6,0xC6,0x00 // 88. X
    ,0x66,0x66,0x66,0x3C,0x18,0x18,0x3C,0x00 // 89. Y
    ,0xFE,0xC6,0x8C,0x18,0x32,0x66,0xFE,0x00 // 90. Z
    ,0x3C,0x30,0x30,0x30,0x30,0x30,0x3C,0x00 // 91. [
    ,0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00 // 92. \
    ,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00 // 93. ]
    ,0x18,0x3C,0x7E,0x18,0x18,0x18,0x18,0x00 // 94. ^
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF // 95. _
    ,0x30,0x18,0x0C,0x00,0x00,0x00,0x00,0x00 // 96. `
    ,0x00,0x00,0x78,0x0C,0x7C,0xCC,0x76,0x00 // 97. a
    ,0xE0,0x60,0x7C,0x66,0x66,0x66,0xDC,0x00 // 98. b
    ,0x00,0x00,0x3C,0x66,0x60,0x66,0x3C,0x00 // 99. c
    ,0x1C,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00 // 100. d
    ,0x00,0x00,0x3C,0x66,0x7E,0x60,0x3C,0x00 // 101. e
    ,0x1C,0x36,0x30,0x78,0x30,0x30,0x78,0x00 // 102. f
    ,0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x7C // 103. g
    ,0xE0,0x60,0x6C,0x76,0x66,0x66,0xE6,0x00 // 104. h
    ,0x18,0x00,0x38,0x18,0x18,0x18,0x3C,0x00 // 105. i
    ,0x06,0x00,0x0E,0x06,0x06,0x66,0x66,0x3C // 106. j
    ,0xE0,0x60,0x66,0x6C,0x78,0x6C,0xE6,0x00 // 107. k
    ,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00 // 108. l
    ,0x00,0x00,0x6C,0xFE,0xD6,0xD6,0xC6,0x00 // 109. m
    ,0x00,0x00,0xDC,0x66,0x66,0x66,0x66,0x00 // 110. n
    ,0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00 // 111. o
    ,0x00,0x00,0xDC,0x66,0x66,0x7C,0x60,0xF0 // 112. p
    ,0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C,0x1E // 113. q
    ,0x00,0x00,0xDC,0x76,0x60,0x60,0xF0,0x00 // 114. r
    ,0x00,0x00,0x3C,0x60,0x3C,0x06,0x7C,0x00 // 115. s
    ,0x30,0x30,0x7C,0x30,0x30,0x36,0x1C,0x00 // 116. t
    ,0x00,0x00,0x66,0x66,0x66,0x66,0x3E,0x00 // 117. u
    ,0x00,0x00,0x66,0x66,0x66,0x3C,0x18,0x00 // 118. v
    ,0x00,0x00,0xC6,0xD6,0xD6,0xFE,0x6C,0x00 // 119. w
    ,0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6,0x00 // 120. x
    ,0x00,0x00,0x66,0x66,0x66,0x3E,0x06,0x7C // 121. y
    ,0x00,0x00,0x7E,0x4C,0x18,0x32,0x7E,0x00 // 122. z
    ,0x0E,0x18,0x18,0x70,0x18,0x18,0x0E,0x00 // 123. {
    ,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00 // 124. |
    ,0x70,0x18,0x18,0x0E,0x18,0x18,0x70,0x00 // 125. }
    ,0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00 // 126. ~
    ,0xCC,0x33,0xCC,0x33,0xCC,0x33,0xCC,0x33 // 127. Tilted bars
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 // 128. Off
    ,0xF0,0xF0,0xF0,0xF0,0x00,0x00,0x00,0x00 // 129. Left upper corner square
    ,0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00 // 130. Topside corner square
    ,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00 // 131. Left and right upper bar 
    ,0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0 // 132. Left bottom square
    ,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0 // 133. Leftside bar
    ,0x0F,0x0F,0x0F,0x0F,0xF0,0xF0,0xF0,0xF0 // 134. Left bottom and right upper square
    ,0xFF,0xFF,0xFF,0xFF,0xF0,0xF0,0xF0,0xF0 // 135. Left bottom, left upper and right upper square
    ,0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F // 136. Right bottom square
    ,0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F // 137. Left upper and right bottom square
    ,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F // 138. Rightside bar
    ,0xFF,0xFF,0xFF,0xFF,0x0F,0x0F,0x0F,0x0F // 139. Right bottom, right upper and left upper square
    ,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF // 140. Bottom bar
    ,0xF0,0xF0,0xF0,0xF0,0xFF,0xFF,0xFF,0xFF // 141. Left upper, bottom and right bottom square
    ,0x0F,0x0F,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF // 142. Left and right bottom and right upper square
    ,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF // 143. Completely on
    ,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00 // 144. 
    ,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00 // 145. 
    ,0x00,0x00,0x00,0x1F,0x1F,0x00,0x00,0x00 // 146. 
    ,0x18,0x18,0x18,0x1F,0x0F,0x00,0x00,0x00 // 147. 
    ,0x00,0x00,0x00,0x18,0x18,0x18,0x18,0x18 // 148. 
    ,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 // 149. 
    ,0x00,0x00,0x00,0x0F,0x1F,0x18,0x18,0x18 // 150. 
    ,0x18,0x18,0x18,0x1F,0x1F,0x18,0x18,0x18 // 151. 
    ,0x00,0x00,0x00,0xF8,0xF8,0x00,0x00,0x00 // 152. 
    ,0x18,0x18,0x18,0xF8,0xF0,0x00,0x00,0x00 // 153. 
    ,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0x00 // 154. 
    ,0x18,0x18,0x18,0xFF,0xFF,0x00,0x00,0x00 // 155. 
    ,0x00,0x00,0x00,0xF0,0xF8,0x18,0x18,0x18 // 156. 
    ,0x18,0x18,0x18,0xF8,0xF8,0x18,0x18,0x18 // 157. 
    ,0x00,0x00,0x00,0xFF,0xFF,0x18,0x18,0x18 // 158. 
    ,0x18,0x18,0x18,0xFF,0xFF,0x18,0x18,0x18 // 159. 
    ,0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00 // 160. 
    ,0x0C,0x18,0x30,0x00,0x00,0x00,0x00,0x00 // 161. 
    ,0x66,0x66,0x00,0x00,0x00,0x00,0x00,0x00 // 162. 
    ,0x3C,0x66,0x60,0xF8,0x60,0x66,0xFE,0x00 // 163. 
    ,0x38,0x44,0xBA,0xA2,0xBA,0x44,0x38,0x00 // 164. 
    ,0x7E,0xF4,0xF4,0x74,0x34,0x34,0x34,0x00 // 165. 
    ,0x1E,0x30,0x38,0x6C,0x38,0x18,0xF0,0x00 // 166. 
    ,0x18,0x18,0x0C,0x00,0x00,0x00,0x00,0x00 // 167. 
    ,0x40,0xC0,0x44,0x4C,0x54,0x1E,0x04,0x00 // 168. 
    ,0x40,0xC0,0x4C,0x52,0x44,0x08,0x1E,0x00 // 169. 
    ,0xE0,0x10,0x62,0x16,0xEA,0x0F,0x02,0x00 // 170. 
    ,0x00,0x18,0x18,0x7E,0x18,0x18,0x7E,0x00 // 171. 
    ,0x18,0x18,0x00,0x7E,0x00,0x18,0x18,0x00 // 172. 
    ,0x00,0x00,0x00,0x7E,0x06,0x06,0x00,0x00 // 173. 
    ,0x18,0x00,0x18,0x30,0x66,0x66,0x3C,0x00 // 174. 
    ,0x18,0x00,0x18,0x18,0x18,0x18,0x18,0x00 // 175. 
    ,0x00,0x00,0x73,0xDE,0xCC,0xDE,0x73,0x00 // 176. 
    ,0x7C,0xC6,0xC6,0xFC,0xC6,0xC6,0xF8,0xC0 // 177. 
    ,0x00,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00 // 178. 
    ,0x3C,0x60,0x60,0x3C,0x66,0x66,0x3C,0x00 // 179. 
    ,0x00,0x00,0x1E,0x30,0x7C,0x30,0x1E,0x00 // 180. 
    ,0x38,0x6C,0xC6,0xFE,0xC6,0x6C,0x38,0x00 // 181. 
    ,0x00,0xC0,0x60,0x30,0x38,0x6C,0xC6,0x00 // 182. 
    ,0x00,0x00,0x66,0x66,0x66,0x7C,0x60,0x60 // 183. 
    ,0x00,0x00,0x00,0xFE,0x6C,0x6C,0x6C,0x00 // 184. 
    ,0x00,0x00,0x00,0x7E,0xD8,0xD8,0x70,0x00 // 185. 
    ,0x03,0x06,0x0C,0x3C,0x66,0x3C,0x60,0xC0 // 186. 
    ,0x03,0x06,0x0C,0x66,0x66,0x3C,0x60,0xC0 // 187. 
    ,0x00,0xE6,0x3C,0x18,0x38,0x6C,0xC7,0x00 // 188. 
    ,0x00,0x00,0x66,0xC3,0xDB,0xDB,0x7E,0x00 // 189. 
    ,0xFE,0xC6,0x60,0x30,0x60,0xC6,0xFE,0x00 // 190. Sigma
    ,0x00,0x7C,0xC6,0xC6,0xC6,0x6C,0xEE,0x00 // 191. Omega
    ,0x18,0x30,0x60,0xC0,0x80,0x00,0x00,0x00 // 192. 
    ,0x18,0x0C,0x06,0x03,0x01,0x00,0x00,0x00 // 193. 
    ,0x00,0x00,0x00,0x01,0x03,0x06,0x0C,0x18 // 194. 
    ,0x00,0x00,0x00,0x80,0xC0,0x60,0x30,0x18 // 195. 
    ,0x18,0x3C,0x66,0xC3,0x81,0x00,0x00,0x00 // 196. 
    ,0x18,0x0C,0x06,0x03,0x03,0x06,0x0C,0x18 // 197. 
    ,0x00,0x00,0x00,0x81,0xC3,0x66,0x3C,0x18 // 198. 
    ,0x18,0x30,0x60,0xC0,0xC0,0x60,0x30,0x18 // 199. 
    ,0x18,0x30,0x60,0xC1,0x83,0x06,0x0C,0x18 // 200. 
    ,0x18,0x0C,0x06,0x83,0xC1,0x60,0x30,0x18 // 201. 
    ,0x18,0x3C,0x66,0xC3,0xC3,0x66,0x3C,0x18 // 202. 
    ,0xC3,0xE7,0x7E,0x3C,0x3C,0x7E,0xE7,0xC3 // 203. 
    ,0x03,0x07,0x0E,0x1C,0x38,0x70,0xE0,0xC0 // 204. 
    ,0xC0,0xE0,0x70,0x38,0x1C,0x0E,0x07,0x03 // 205. 
    ,0xCC,0xCC,0x33,0x33,0xCC,0xCC,0x33,0x33 // 206. 
    ,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55 // 207. 
    ,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00 // 208. 
    ,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03 // 209. 
    ,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF // 210. 
    ,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0 // 211. 
    ,0xFF,0xFE,0xFC,0xF8,0xF0,0xE0,0xC0,0x80 // 212. 
    ,0xFF,0x7F,0x3F,0x1F,0x0F,0x07,0x03,0x01 // 213. 
    ,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF // 214. 
    ,0x80,0xC0,0xE0,0xF0,0xF8,0xFC,0xFE,0xFF // 215. 
    ,0xAA,0x55,0xAA,0x55,0x00,0x00,0x00,0x00 // 216. 
    ,0x0A,0x05,0x0A,0x05,0x0A,0x05,0x0A,0x05 // 217. 
    ,0x00,0x00,0x00,0x00,0xAA,0x55,0xAA,0x55 // 218. 
    ,0xA0,0x50,0xA0,0x50,0xA0,0x50,0xA0,0x50 // 219. 
    ,0xAA,0x54,0xA8,0x50,0xA0,0x40,0x80,0x00 // 220. 
    ,0xAA,0x55,0x2A,0x15,0x0A,0x05,0x02,0x01 // 221. 
    ,0x01,0x02,0x05,0x0A,0x15,0x2A,0x55,0xAA // 222. 
    ,0x00,0x80,0x40,0xA0,0x50,0xA8,0x54,0xAA // 223. 
    ,0x7E,0xFF,0x99,0xFF,0xBD,0xC3,0xFF,0x7E // 224. 
    ,0x7E,0xFF,0x99,0xFF,0xC3,0xBD,0xFF,0x7E // 225. 
    ,0x38,0x38,0xFE,0xFE,0xFE,0x10,0x38,0x00 // 226. 
    ,0x10,0x38,0x7C,0xFE,0x7C,0x38,0x10,0x00 // 227. 
    ,0x6C,0xFE,0xFE,0xFE,0x7C,0x38,0x10,0x00 // 228. Hearts
    ,0x10,0x38,0x7C,0xFE,0xFE,0x10,0x38,0x00 // 229. Spades
    ,0x00,0x3C,0x66,0xC3,0xC3,0x66,0x3C,0x00 // 230. Diamonds
    ,0x00,0x3C,0x7E,0xFF,0xFF,0x7E,0x3C,0x00 // 231. Clubs
    ,0x00,0x7E,0x66,0x66,0x66,0x66,0x7E,0x00 // 232. 
    ,0x00,0x7E,0x7E,0x7E,0x7E,0x7E,0x7E,0x00 // 233. 
    ,0x0F,0x07,0x0D,0x78,0xCC,0xCC,0xCC,0x78 // 234. Male
    ,0x3C,0x66,0x66,0x66,0x3C,0x18,0x7E,0x18 // 235. Female
    ,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x7C,0x38 // 236. 
    ,0x18,0x1C,0x1E,0x1B,0x18,0x78,0xF8,0x70 // 237. 
    ,0x99,0x5A,0x24,0xC3,0xC3,0x24,0x5A,0x99 // 238. 
    ,0x10,0x38,0x38,0x38,0x38,0x38,0x7C,0xD6 // 239. 
    ,0x18,0x3C,0x7E,0xFF,0x18,0x18,0x18,0x18 // 240. 
    ,0x18,0x18,0x18,0x18,0xFF,0x7E,0x3C,0x18 // 241. 
    ,0x10,0x30,0x70,0xFF,0xFF,0x70,0x30,0x10 // 242. 
    ,0x08,0x0C,0x0E,0xFF,0xFF,0x0E,0x0C,0x08 // 243. 
    ,0x00,0x00,0x18,0x3C,0x7E,0xFF,0xFF,0x00 // 244. 
    ,0x00,0x00,0xFF,0xFF,0x7E,0x3C,0x18,0x00 // 245. 
    ,0x80,0xE0,0xF8,0xFE,0xF8,0xE0,0x80,0x00 // 246. 
    ,0x02,0x0E,0x3E,0xFE,0x3E,0x0E,0x02,0x00 // 247. 
    ,0x38,0x38,0x92,0x7C,0x10,0x28,0x28,0x28 // 248. 
    ,0x38,0x38,0x10,0xFE,0x10,0x28,0x44,0x82 // 249. 
    ,0x38,0x38,0x12,0x7C,0x90,0x28,0x24,0x22 // 250. 
    ,0x38,0x38,0x90,0x7C,0x12,0x28,0x48,0x88 // 251. 
    ,0x00,0x3C,0x18,0x3C,0x3C,0x3C,0x18,0x00 // 252. 
    ,0x3C,0xFF,0xFF,0x18,0x0C,0x18,0x30,0x18 // 253. 
    ,0x18,0x3C,0x7E,0x18,0x18,0x7E,0x3C,0x18 // 254. 
    ,0x00,0x24,0x66,0xFF,0x66,0x24,0x00,0x00 // 255. 
];

function randint(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}


/*
 * === Receive Data from Websocket
 */
function onMessage(evt) {
    // Show we are connected
    missed_heartbeats=0;
    $('#settingstext').css('color', '#048C00');

    // Processed the received data
    var answer = evt.data[0];
    var answerdata = null;
    if(evt.data.length > 1) {
        answerdata = evt.data.slice(1);
    } else {
        answerdata = "[no data received]";
    }
    messages = document.getElementById("messages").value;
    switch(answer) {
        case '<': // Yihah still alive, don't update the messages field though
            break;
        case 'e': case 'E': // Error message
            document.getElementById("messages").value = messages + "Error! --> " + answerdata + "\n";
            break;
        case 'h': // heapsize
            document.getElementById("messages").value = messages + "Free heap size: " + answerdata  + "\n";
            break;
        case 'i': case 'I': // Info message
            document.getElementById("messages").value = messages + "Info --> " + answerdata + "\n";
            break;
        case 'p': //pong message
            document.getElementById("messages").value = messages + "pong" + "\n";
            break;
        default:
            document.getElementById("messages").value = messages + evt.data + "\n";
            break;
    }
}

function setcharactercolor(hexcolor) {
	charactercolor = hexcolor;
}
function getcharacter(character, colors=charactercolor) {
	/*
	 *	This only works with rowsize=colsize=8
	 *  
	 */
	index = 8 * character; //Index indexes charset above, 8 bytes for a complete character
	var character = new Uint8Array(64*3);
	var mask = [128,64,32,16,8,4,2,1];
	var count = 0;

	for(var col=0; col<8; col++) {
		if(colors.length == 8) { //Colors per pixel
			for(var i = 0; i < mask.length; i++) {
				if(charset[index+col] & mask[i] == 0) {
					character[count] = 0;
					character[count+1] = 0;
					character[count+2] = 0;
				} else {
					character[count] = parseInt(colors[i].substr(0,2), 16);
					character[count+1] = parseInt(colors[i].substr(2,2), 16);
					character[count+2] = parseInt(colors[i].substr(4,2), 16);
				}
				count += 3;
			}
		} else { //Assume a single hexcolor
			for(var i = 0; i < mask.length; i++) {
				if( (charset[index+col] & mask[i]) == 0) {
					character[count] = 0;
					character[count+1] = 0;
					character[count+2] = 0;
				} else {
					character[count] = parseInt(colors.substr(0,2), 16);
					character[count+1] = parseInt(colors.substr(2,2), 16);
					character[count+2] = parseInt(colors.substr(4,2), 16);
				}
				count += 3;
			}
		}
	}

	return character;
}

/*
 * === Send Data to Websocket
 * first value in the Uint8Array is the 'command'
 * the rest is used to set the pixels
 */

// setSinglecolor = 1
function sendsinglecolor(hexcolor) {
	var color = new Uint8Array(4);
	color[0] = 1; //Singlecolor
	color[1] = parseInt(hexcolor.substr(0,2), 16);
	color[2] = parseInt(hexcolor.substr(2,2), 16);
	color[3] = parseInt(hexcolor.substr(4,2), 16);
	mysocket.binaryType = 'arraybuffer';
	mysocket.send(color);
}

// setGradient = 2
function sendgrad() {
	var colors = new Uint8Array(7);
    var gradientbox = document.getElementById('gradientbox');
    var leftcolor = document.getElementById('gradientbutton1').innerText;
    var rightcolor = document.getElementById('gradientbutton2').innerText;
    gradientbox.style.backgroundImage = '-webkit-linear-gradient(' + 'left' + ', #' + leftcolor + ', #' + rightcolor + ')';
    gradientbox.style.backgroundImage = '-o-linear-gradient(' + 'right' + ', #' + leftcolor + ', #' + rightcolor + ')';
    gradientbox.style.backgroundImage = '-moz-linear-gradient(' + 'left' + ', #' + leftcolor + ', #' + rightcolor + ')';
    gradientbox.style.backgroundImage = 'linear-gradient(' + 'to right' + ', #' + leftcolor + ', #' + rightcolor + ')';

	colors[0] = 2; // Gradient
	colors[1] = parseInt(leftcolor.substr(0,2), 16);
	colors[2] = parseInt(leftcolor.substr(2,2), 16);
	colors[3] = parseInt(leftcolor.substr(4,2), 16);
	colors[4] = parseInt(rightcolor.substr(0,2), 16);
	colors[5] = parseInt(rightcolor.substr(2,2), 16);
	colors[6] = parseInt(rightcolor.substr(4,2), 16);
	mysocket.binaryType = 'arraybuffer';
	mysocket.send(colors);
}

// setPixel = 3
function sendindividualone(r,c,hexcolor) {
	var indexedcolor = new Uint8Array(6);
	indexedcolor[0] = 3;
	indexedcolor[1] = parseInt(r);
	indexedcolor[2] = parseInt(c);
	indexedcolor[3] = parseInt(hexcolor.substr(0,2), 16);
	indexedcolor[4] = parseInt(hexcolor.substr(2,2), 16);
	indexedcolor[5] = parseInt(hexcolor.substr(4,2), 16);
	mysocket.binaryType = 'arraybuffer';
    mysocket.send(indexedcolor);
}

// setPixels = 4
function sendindividual(colors) {
	mysocket.binaryType = 'arraybuffer';
    mysocket.send(colors);
}


function drawindividual() {
    var nrofcolumns = document.getElementById('individualcolumns').value;
    var nrofrows = document.getElementById('individualrows').value;
    var saturation = document.getElementById('saturation').value;
    var value = document.getElementById('value').value;

    var total = nrofrows*nrofcolumns;
    var steps = 360/total;
	var index = 1;
	var colors = new Uint8Array(1 + 3*total);
	colors[0] = 4;

    $("#individualcontainer").empty();
    for(var r = 0; r < nrofrows; r++) {
        var tr = document.createElement('tr');
        for(var c = 0; c < nrofcolumns; c++) {
            var td = document.createElement('td');
            var input = document.createElement('DIV');
            input.className = "individualbutton";

			var picker = new jscolor(input, {closable:'true', onFineChange:'sendindividualone('+r+','+c+',this.toString())'});
			if(individualmode == "rainbow") {
				picker.fromHSV(total*steps, saturation, value);
			} else if(individualmode == "off") {
				picker.fromRGB(0,0,0);
			} else if(individualmode == "random") {
				picker.fromHSV(randint(0,255), saturation, value);
			}

			hexcolor = picker.toString();
			colors[index] = parseInt(hexcolor.substr(0,2), 16);
			colors[index+1] = parseInt(hexcolor.substr(2,2), 16);
			colors[index+2] = parseInt(hexcolor.substr(4,2), 16);

            td.appendChild(input);
            tr.appendChild(td);

            total -= 1;
			index += 3;
        }
        $("#individualcontainer").append(tr);
    }

    sendindividual(colors);
}

// Hide all others when opening a section/view
$(".nav a").on('click',function(e) {
    e.preventDefault();
    $('.container').collapse('hide');
    $( $(this).attr('href') ).collapse('show');
    $(this).parent().addClass('active').siblings().removeClass('active');
});

// The same for when a view is called from the settings page
function changeview(caller) {
    var linkactive = $('.nav').find('a[href="'+caller+'"]');
    $(linkactive).parent().addClass('active').siblings().removeClass('active');
    caller = $(caller);
    $('.container').collapse('hide');
    caller.collapse('show');
}
$('#individualrows').keypress(function(event){
    var keycode = (event.keyCode ? event.keyCode : event.which);
    if(keycode == '13'){
        changeview('#individual');
    }
});
$('#individualcolumns').keypress(function(event){
    var keycode = (event.keyCode ? event.keyCode : event.which);
    if(keycode == '13'){
        changeview('#individual');
    }
});


// On small screens close the collapsed menu after a click
$('.navbar-collapse a').click(function(){
    $(".navbar-collapse").collapse('hide');
});

function wslost(msg = "error") {
    $('#settingstext').css('color', '#ff0000');
    $('#connected').addClass('hidden');
    $('#notconnected').removeClass('hidden');
    document.getElementById("messages").value = document.getElementById("messages").value + "Closing connection: " + msg + "\n";
    mysocket.close();
}

$(document).ready(function() {
    //Get the current settings from the websocket server
    mysocket.onopen = function () {
        if (heartbeat_interval === null) {
            missed_heartbeats = 0;
            heartbeat_interval = setInterval(function() {
                try {
                    missed_heartbeats++;
                    if (missed_heartbeats >= 3)
                        throw new Error("Too many missed heartbeats.");
                    mysocket.send(heartbeat_msg);
                } catch(e) {
                    clearInterval(heartbeat_interval);
                    heartbeat_interval = null;
                    wslost(e.message);
                    console.warn("Closing connection. Reason: " + e.message);
                }
            }, 3000);
        }
    };
    mysocket.onclose = function () {
    };
    mysocket.onerror = function () {
        wslost("error");
    };
    mysocket.onmessage = function(evt) { 
        onMessage(evt)
    };

    //Add singlecolor functionality
    var $sbutton = $("<div id='singlecolorbutton' class='singlecolorbutton'>");
    $sbutton.appendTo($("#singlecolor"));
    var sColorPicker = new jscolor(document.getElementById('singlecolorbutton'), {closable:'true', onFineChange:'sendsinglecolor(this.toString())', value:'004444'});

    $('#singlecolor').on('shown.bs.collapse', function() {
        var singlecolorwidth = $("#singlecolor").width() - 64;
        var singlecolorheight = $(window).height() - $('#singlecolor').offset().top - $("#singlecolor").outerHeight(true) - 64;
        sColorPicker.width = singlecolorwidth;
        sColorPicker.height = singlecolorheight;
        sColorPicker.redraw();
        sColorPicker.show();
    });


    //Gradient
    var $gradientbutton1 = $("<div id='gradientbutton1' class='gradientbutton'>");
    var $gradientbutton2 = $("<div id='gradientbutton2' class='gradientbutton'>");
    $gradientbutton1.appendTo($("#gradientleftcol"));
    $gradientbutton2.appendTo($("#gradientrightcol"));

    var gradcolpick1 = new jscolor(document.getElementById('gradientbutton1'), {closable:'true', onFineChange:'sendgrad()', value:'F82000'});
    var gradcolpick2 = new jscolor(document.getElementById('gradientbutton2'), {closable:'true', onFineChange:'sendgrad()', value:'00028F'});

    $('#gradient').on('shown.bs.collapse', function() {
        var gradientwidth = $("#gradientleftcol").width() - 64;
        gradheight = $(window).height() - $('#gradientleftcol').offset().top - $("#gradientleftcol").outerHeight(true) - 64;
        gradcolpick1.width = gradientwidth;
        gradcolpick1.height = gradheight;
        gradcolpick2.width = gradientwidth;
        gradcolpick2.height = gradheight;
        gradcolpick2.redraw();
        gradcolpick1.redraw();
        gradcolpick1.show()
    });

    $('#individual').on('shown.bs.collapse', function() {
        drawindividual();
    });

    // Add individual led control functionality
    $( "#saturation" ).change(function() {
        drawindividual();
    });
    $( "#value" ).change(function() {
        drawindividual();
    });

	// Colorpicker for sending characters
    var $charactercolorbutton = $("<div id='charactercolor' class='singlecolorbutton'>");
    $charactercolorbutton.appendTo($("#charactercolorplace"));
    var charColorPicker = new jscolor(document.getElementById('charactercolor'), {closable:'true', onFineChange:'setcharactercolor(this.toString())', value:'331111'});

	// Send characters
    $('#characterbutton').click( function(e) {
        e.preventDefault();
        characters = $('#characters').val();
		nr_of_characters = characters.length;
		if(nr_of_characters == 1) {
			mysocket.binaryType = 'arraybuffer';
			var character = new Uint8Array(1 + 64*3);
			character[0] = 5;
			character.set(getcharacter(characters.charCodeAt(0)), 1);
			mysocket.send(character);
		} else if(nr_of_characters > 1) {
			var concatcharacters = new Uint8Array(1 + 64*3*nr_of_characters);
			concatcharacters[0] = 5;
			for(var i = 0; i < nr_of_characters; i++) {
				concatcharacters.set(getcharacter(characters.charCodeAt(i)),
					1 + i*64*3);
			}
			mysocket.binaryType = 'arraybuffer';
			mysocket.send(concatcharacters);
		}
    });

    $('#characters').change(function() {
		var hexChar = ["0", "1", "2", "3", "4", "5", "6", "7","8", "9", "A", "B", "C", "D", "E", "F"];
		var bytestring = '';
        var characters = $('#characters').val();
		for(var i=0; i<characters.length; i++) {
			index = 8*characters.charCodeAt(i);
			bytes = charset.slice(index, index+8);
			//bytestring += bytes;
			for(var j=0; j<bytes.length; j++) {
				b = bytes[j]
				bytestring += hexChar[(b >> 4) & 0x0f] + hexChar[b & 0x0f];
			}
			bytestring += ' ';
		}
        $('#bytesinput').val(bytestring);
	});

    $('#bytesbutton').click( function(e) {
        e.preventDefault();
        bytestring = $('#bytesinput').val();
		result = bytestring.match(/\b[0-9A-Fa-f]{16}\b/g);
		
		var characters = new Uint8Array(1+64*3*result.length);
		characters[0] = 5;
		var count = 1;
		var mask = [128,64,32,16,8,4,2,1];
		colors = charactercolor;

		for(var c=0; c<result.length; c++) {
			for(var j=0; j<16; j+=2) {
				value = parseInt(result[c][j], 16) * 16 + parseInt(result[c][j+1],16);
				for(var i = 0; i < mask.length; i++) {
					if( (value & mask[i]) == 0) {
						characters[count] = 0;
						characters[count+1] = 0;
						characters[count+2] = 0;
					} else {
						characters[count] = parseInt(colors.substr(0,2), 16);
						characters[count+1] = parseInt(colors.substr(2,2), 16);
						characters[count+2] = parseInt(colors.substr(4,2), 16);
					}
					count += 3;
				}
			}
		}
		mysocket.binaryType = 'arraybuffer';
		mysocket.send(characters);
	});
    $('#rotationbutton').click( function(e) {
        e.preventDefault();
		var rotationcount = new Uint8Array(1+1);
        rotationcount[0] = 254;
        rotationcountstr = $('#rotationcount').val();
		rotationcount[1] = parseInt(rotationcountstr.match(/[0-9]+/) % 256);
        console.log(rotationcount);
		mysocket.binaryType = 'arraybuffer';
		mysocket.send(rotationcount);
    });
    $('#shiftbutton').click( function(e) {
        e.preventDefault();
		var shiftcount = new Uint8Array(1+1);
        shiftcount[0] = 253;
        shiftcountstr = $('#shiftcount').val();
		shiftcount[1] = parseInt(shiftcountstr.match(/[0-9]+/) % 256);
        console.log(shiftcount);
		mysocket.binaryType = 'arraybuffer';
		mysocket.send(shiftcount);
    });
	$("input[name=textmode]").change(function () {
		if(this.id == "onebyone") {
			mysocket.send('ro');
		}
		else if(this.id == "scroll") {
			mysocket.send('rs');
		}
	});

    // Settings
    $('#ws1').text(ws1);
    $('#websocket1').val(ws1);
    $('#websocket1button').click( function(e) {
        e.preventDefault();
        ws1 = $('#websocket1').val();
        window.location = location.protocol + '//' + location.host + location.pathname + "?ws1=" + ws1;
    });
    $('#pingbutton').click( function(e) {
        e.preventDefault();
        mysocket.send('>ping');
    });
    $('#heapbutton').click( function(e) {
        e.preventDefault();
        mysocket.send('heap');
    });
    $('#clearbutton').click( function(e) {
        e.preventDefault();
        $('#messages').val('');
    });
    $( "#websocket1name" ).change(function() {
        $("#websitename").text($("#websocket1name").val());
    });

    $( "#individualcolumns" ).change(function() {
        drawindividual();
    });
    $( "#individualrows" ).change(function() {
        drawindividual();
    });

	$("input[name=gammacorrection]").change(function () {
		if(this.id == "yes") {
			mysocket.send('cy');
		}
		else if(this.id == "no") {
			mysocket.send('cn');
		}
	});
	$("input[name=singlecolormode]").change(function () {
		if(this.id == "all") {
			mysocket.send('sa');
		}
		else if(this.id == "one") {
			mysocket.send('sc');
		}
	});
	$("input[name=gradientorientation]").change(function () {
		if(this.id == "horizontal") {
			mysocket.send('oh');
		}
		else if(this.id == "vertical") {
			mysocket.send('ov');
		} else if(this.id == "consecutive") {
			mysocket.send('oc');
		}
	});
	$("input[name=individualmode]").change(function () {
		if(this.id == "rainbow") {
			individualmode = "rainbow";
			console.log("rainbow");
			drawindividual();
		}
		else if(this.id == "off") {
			individualmode = "off";
			console.log("off");
			drawindividual();
		} else if(this.id == "random") {
			individualmode = "random";
			console.log("rainbow");
			drawindividual();
		}
	});
	$('#applydelay').click( function(e) {
        e.preventDefault();
        delay_amount = $('#characterdelay').val();
		mysocket.send('d'+delay_amount);
	});

    $('#settingslinks').find(('a[href^="#"]')).on('click',function (e) {
        e.preventDefault();

        var target = this.hash;
        var $target = $(target);

        $('html, body').stop().animate({
            'scrollTop': $target.offset().top
        }, 900, 'swing')
    });

    //Show the page after everything has been loaded and set
    jQuery(window).load(function () {
        $("body").fadeIn("slow");
    });
});
